#FUNCIONES AUXILIARES

PolinomioAFx := proc(f,p,pol)
# Convierte un polinomio f a un polinomo con coeficientes en F.
# Si |F| = q = p, poner pol = y el polinomio F se convertira en un polinomio con coeficientes en Zp.
local normalizado, result, j, coeficiente; 
if pol = 1 then
    result := 0
    for j from 0 to degree(f,x) do
        coeficiente := coeff(f,x,j) mod p;
        result :=result + coeficiente*x^(j);
    od;
    normalizado := normal(result)
else
    result := 0;
    for j from 0 to degree(f, x) do
    coeficiente := rem(coeff(f, x, j), pol, alpha) mod p;
    result := result + coeficiente*x^j;
    od;
    normalizado := normal(result);
fi:
return(normalizado)
end:

MCDFinito:=proc(f,g,p,pol)
    # Calcula el M.C.D. entre dos polinomios primitivos con coeficientes en F.
local r, n, i, coef, normalizado;
r[0] := f;
r[1] := g;

n[0] := degree(f, x);
n[1] := degree(g, x);

i:=1;  
while r[i]<>0 do
    coef := PolinomioAFx(lcoeff(r[i], x)^(n[i - 1] - n[i] + 1), p, pol)
    r[i + 1] := primpart(rem(PolinomioAFx(coef*r[i - 1], p, pol), r[i], x), x)
    r[i + 1] := primpart(PolinomioAFx(r[i + 1], p, pol), x)


# 1. SFD (Square-free descomposition)

SFD:=proc(f,p,w,pol)
_local(F, L, s, j, k, g, h, m, diferencialF, G, H);
F := f;
L := [];
s := 1;
while (F<>1) do
    j := 1;
    if PolinomioAFx(diff(F,x),p,pol)=0 then
        diferencialF :=1;
    else
        diferencialF := PolinomioAFx(diff(F, x), p, pol);
    fi:
    g:=PolinomioAFx(quo(F,MCDFinito(F,diferencialF,p,pol),x),p,pol);      
    while g<>1 do     
    F := PolinomioAFx(quo(F, g, x), p, pol);
    h := MCDFinito(F, g, p, pol);
    m := PolinomioAFx(quo(g, h, x), p, pol);
    if m<>1 then
        L:=[op(L),[m,j*s]];
    fi:
    g := h;
    j := j + 1;
    od:
    if F<>1 then #Entonces F es un G(X^(p)), que se puede poner como un H^(p)utilizando una f√≥rmula.
        G := PolinomioAFx(quo(F, x^p, x) + rem(F, x^p, x), p, pol);
        H := 0;
        for k  from 0 to degree(G,x) do    
            H:=H + coeff(G,x,k)^(p^((w-1)))*x^(k);
        od;
        F := PolinomioAFx(H, p, pol);
        s := p*s;
    fi:
od:
return(L)
end:

#EJEMPLOS SFD:

p := 2;
w := 2;
pol := alpha^2 + alpha + 1;
f := PolinomioAFx((x^2 + alpha)^2*(x + 1), p, pol);
SFD(f, p, w, pol) #Resultado: [[x + 1, 1], [x^2 + alpha, 2]]

p := 3;
w := 3;
pol := alpha^3 + alpha^2 + alpha - 1;
f := PolinomioAFx((x^2 + alpha)^2*(x - 2), p, pol);
SFD(f, p, w, pol); #Resultado: [[x + 1, 1], [x^2 + alpha, 2]]

p := 5;
w := 1;
pol := 1;
f := PolinomioAFx((x^2 + 1)^3*x, p, pol);
SFD(f, p, w, pol); #Resultado: [[x, 1], [x^2 + 1, 3]]

p := 7;
w := 1;
pol := 1;
SFD(x^3 + 2*x^2 + x, p, w, pol); #Resultado: [[x, 1], [x + 1, 2]]


# 2. DDF ( Distinct Degree Factorization)

DDF:=proc(f,p,w,pol)
_local(L, F, X, h, k, g, q);
q := p^w;
L := [];
F := f;
h := rem(x, F, x);
k := 0;
while F<>1 do
    h := PolinomioAFx(rem(h^q, F, x), p, pol);
    k := k + 1;
    g := MCDFinito(h - x, F, p, pol);
    if g<>1 then
        F := PolinomioAFx(quo(F, g, x), p, pol);
        h := PolinomioAFx(rem(h, F, x), p, pol);
        L := [op(L), [g, k]];
    fi:
od:
return(L)
end:

#EJEMPLOS:

p := 5;
w := 1;
pol := 1;
f := PolinomioAFx((x^2 + x + 1)*(x - 5), p, pol);
DDF(f, p, w, pol); #RESULTADO: [[x, 1], [x^2 + x + 1, 2]]

p := 2;
w := 2;
pol := alpha^2 + alpha + 1;
f := PolinomioAFx((x^2 + alpha + x)*(x^3 + 1), p, pol);
DDF(f, p, w, pol); #RESULTADO: [[x^3 + 1, 1], [x^2 + alpha + x, 2]]

p := 3;
w := 3;
pol := alpha^3 + alpha^2 + alpha - 1;
f := PolinomioAFx(x^4 + 2*x^3 + alpha*x + alpha + 2*x, p, pol);
DDF(f, p, w, pol); #RESULTADO: [[x + 1, 1], [x^3 + x^2 + alpha + 2*x, 3]]


# 3. EDF (Equal Degree Factorization)

Mk:=proc(polinomio,w,k,p,pol)
local M, representacion;
M := sum(polinomio^(p^j), j = 0 .. (k*w - 1));
representacion := PolinomioAFx(M,p,pol)
return(representacion)
end:

EDF:=proc(f,p,w, pol,k)
local l, r, H, A, h, a, d, t;
l := degree(f);
r := l/k;
H := {f};
while nops(H)<r do
    A:={};      
    for h in H do
        a := randpoly(x);
        a := rem(a, h, x);
        a := PolinomioAFx(a, p, pol);
        d := PolinomioAFx(MCDFinito(Mk(a, w, k, p, pol), h, p, pol), p, pol);
        if (d=1 or d=h) then
            A := A union {h}
        else
            t := PolinomioAFx(quo(h, d, x), p, pol);
            A := A union {d, t};
         fi:
    od:
    H:=A;
od:
return(H)

#EJEMPLOS:

p := 5;
w := 1;
pol := 1;
f := PolinomioAFx(x^3 + x^2 + x, p, pol);
EDF(f, p, w, pol, 2); #Resultado: {x, x^2 + x + 1}

p := 2;
w := 2;
pol := alpha^2 + alpha + 1;
f := PolinomioAFx((x + 1)*(x + alpha), p, pol);
EDF(f, p, w, pol, 1); #Resultado: {x + 1, x + alpha}

p := 2;
w := 3;
pol := alpha^3 + alpha^2 + alpha - 1;
f := PolinomioAFx(x^3 + alpha*x + x^2 + alpha + x + 1, p, pol);
EDF(f, p, w, pol, 2); #Resultado {x + 1, x^2 + alpha + 1}
